[
  {
    "name": "create_users_table",
    "sql": "CREATE TABLE IF NOT EXISTS public.users (\n  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,\n  email TEXT UNIQUE NOT NULL,\n  full_name TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);"
  },
  {
    "name": "create_devices_table",
    "sql": "CREATE TABLE IF NOT EXISTS public.devices (\n  device_id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  owner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n  unique_code TEXT UNIQUE NOT NULL,\n  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'active', 'offline')),\n  last_seen TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  device_name TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);"
  },
  {
    "name": "create_content_table",
    "sql": "CREATE TABLE IF NOT EXISTS public.content (\n  content_id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  owner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n  file_url TEXT NOT NULL,\n  content_type TEXT NOT NULL CHECK (content_type IN ('image', 'video')),\n  file_name TEXT NOT NULL,\n  file_size BIGINT,\n  duration INTEGER,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);"
  },
  {
    "name": "create_playlists_table",
    "sql": "CREATE TABLE IF NOT EXISTS public.playlists (\n  playlist_id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  device_id UUID REFERENCES public.devices(device_id) ON DELETE CASCADE NOT NULL,\n  content_id UUID REFERENCES public.content(content_id) ON DELETE CASCADE NOT NULL,\n  start_time TIMESTAMP WITH TIME ZONE NOT NULL,\n  end_time TIMESTAMP WITH TIME ZONE NOT NULL,\n  order_index INTEGER NOT NULL,\n  status TEXT DEFAULT 'active' CHECK (status IN ('active', 'paused', 'stopped')),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);"
  },
  {
    "name": "enable_rls_users",
    "sql": "ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;"
  },
  {
    "name": "enable_rls_devices",
    "sql": "ALTER TABLE public.devices ENABLE ROW LEVEL SECURITY;"
  },
  {
    "name": "enable_rls_content",
    "sql": "ALTER TABLE public.content ENABLE ROW LEVEL SECURITY;"
  },
  {
    "name": "enable_rls_playlists",
    "sql": "ALTER TABLE public.playlists ENABLE ROW LEVEL SECURITY;"
  },
  {
    "name": "create_users_rls_policy",
    "sql": "CREATE POLICY \"Users can view own profile\" ON public.users\n  FOR SELECT USING (auth.uid() = id);\n\nCREATE POLICY \"Users can update own profile\" ON public.users\n  FOR UPDATE USING (auth.uid() = id);\n\nCREATE POLICY \"Users can insert own profile\" ON public.users\n  FOR INSERT WITH CHECK (auth.uid() = id);"
  },
  {
    "name": "create_devices_rls_policy",
    "sql": "CREATE POLICY \"Users can view own devices\" ON public.devices\n  FOR SELECT USING (auth.uid() = owner_id);\n\nCREATE POLICY \"Users can insert own devices\" ON public.devices\n  FOR INSERT WITH CHECK (auth.uid() = owner_id);\n\nCREATE POLICY \"Users can update own devices\" ON public.devices\n  FOR UPDATE USING (auth.uid() = owner_id);\n\nCREATE POLICY \"Users can delete own devices\" ON public.devices\n  FOR DELETE USING (auth.uid() = owner_id);"
  },
  {
    "name": "create_content_rls_policy",
    "sql": "CREATE POLICY \"Users can view own content\" ON public.content\n  FOR SELECT USING (auth.uid() = owner_id);\n\nCREATE POLICY \"Users can insert own content\" ON public.content\n  FOR INSERT WITH CHECK (auth.uid() = owner_id);\n\nCREATE POLICY \"Users can update own content\" ON public.content\n  FOR UPDATE USING (auth.uid() = owner_id);\n\nCREATE POLICY \"Users can delete own content\" ON public.content\n  FOR DELETE USING (auth.uid() = owner_id);"
  },
  {
    "name": "create_playlists_rls_policy",
    "sql": "CREATE POLICY \"Users can view playlists for own devices\" ON public.playlists\n  FOR SELECT USING (\n    EXISTS (\n      SELECT 1 FROM public.devices \n      WHERE devices.device_id = playlists.device_id \n      AND devices.owner_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Users can insert playlists for own devices\" ON public.playlists\n  FOR INSERT WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM public.devices \n      WHERE devices.device_id = playlists.device_id \n      AND devices.owner_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Users can update playlists for own devices\" ON public.playlists\n  FOR UPDATE USING (\n    EXISTS (\n      SELECT 1 FROM public.devices \n      WHERE devices.device_id = playlists.device_id \n      AND devices.owner_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Users can delete playlists for own devices\" ON public.playlists\n  FOR DELETE USING (\n    EXISTS (\n      SELECT 1 FROM public.devices \n      WHERE devices.device_id = playlists.device_id \n      AND devices.owner_id = auth.uid()\n    )\n  );"
  },
  {
    "name": "create_indexes",
    "sql": "CREATE INDEX IF NOT EXISTS idx_devices_owner_id ON public.devices(owner_id);\nCREATE INDEX IF NOT EXISTS idx_devices_unique_code ON public.devices(unique_code);\nCREATE INDEX IF NOT EXISTS idx_content_owner_id ON public.content(owner_id);\nCREATE INDEX IF NOT EXISTS idx_playlists_device_id ON public.playlists(device_id);\nCREATE INDEX IF NOT EXISTS idx_playlists_content_id ON public.playlists(content_id);\nCREATE INDEX IF NOT EXISTS idx_playlists_time_range ON public.playlists(start_time, end_time);"
  },
  {
    "name": "create_updated_at_trigger",
    "sql": "CREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\nCREATE TRIGGER update_users_updated_at BEFORE UPDATE ON public.users\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_devices_updated_at BEFORE UPDATE ON public.devices\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_content_updated_at BEFORE UPDATE ON public.content\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_playlists_updated_at BEFORE UPDATE ON public.playlists\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();"
  }
]